{
    "tasks":[
        {
            "vm_name":"@@{VMNAME}@@",
            "memory_mb":"2048",
            "network_uuid":"2b8d8ff9-d9bd-444c-8ffe-889eaad30826",
            "uid":"58c969284922937b2bfaee67",
            "classification":"provision_nutanix",
            "num_cores_per_vcpu":"1",
            "fixed_cost":0.0,
            "vm_disk_uuid":"3ea34f2e-cedc-42e3-9426-3ca0d5cb3850",
            "creation_time":1489636235,
            "variable_cost":0.0,
            "num_vcpus":"2",
            "credential_id":"58c969284922937b2bfaee5c",
            "modification_time":1489645663,
            "vdisks":[

            ],
            "version":130,
            "critical":true,
            "editables":[

            ],
            "name":"Provision Nutanix"
        },
        {
            "uid":"58c969284922937b2bfaee68",
            "classification":"runshell",
            "script":"##############################################\n# Name        : ActiveDirectoryBundle.ps1\n# Author      : K Sarath Kumar\n# Version     : 1.0\n# Description : Installs and configures domain controller features AD, CDC, ADC & RODC.\n##############################################\n\n$WS2008R2_MAJOR                 = '6.1'\n$WS2012_MAJOR                   = '6.2'\n$WS2012R2_MAJOR                 = '6.3'\n$WS2016_MAJOR                   = '10.0'\n\n# -*- Checks AD Domain services Installation\nfunction Check-ActiveDirectoryFeature {\n   return $(Get-WindowsFeature AD-Domain-Services -ErrorAction SilentlyContinue).Installed\n}\n# -*- Installs AD Domain services\nfunction Install-ActiveDirectory {\n  Write-Output \"Installing AD Features.\"\n  Install-WindowsFeature -Name AD-Domain-Services -IncludeManagementTools\n}\n# -*- Checks the pre existance of domain\nfunction Check-DomainExistance {\n  #if (Get-ADDomainController -Discover -ErrorAction SilentlyContinue){\n  if (\"$((wmic ComputerSystem get DomainRole)[2])\".trim() -eq \"5\"){\n   return $true\n  }\n  else{\n    return $false\n  }\n}\n# -*- Gets Machine IP address, Netmask, DNS and prefix\nfunction Get-ServerIPAddress {\n  $IPType = \"IPv4\"\n  $IPv4Address = $(Get-NetAdapter | ? {$_.Status -eq \"up\"}| Get-NetIPAddress | ? {$_.AddressFamily -eq \"IPv4\"}).IPv4Address\n  $Prefix = $(Get-NetAdapter | ? {$_.Status -eq \"up\"} | Get-NetIPAddress).PrefixLength[1]\n  $Gateway = \"$((Get-WmiObject Win32_NetworkAdapterConfiguration -EA Stop | ? {$_.IPEnabled}).DefaultIPGateway)\"\n  $DNS = $(Get-NetAdapter | ? {$_.Status -eq \"up\"} | Get-DnsClientServerAddress | ? {$_.AddressFamily -eq 2}).ServerAddresses\n  return $IPType, $IPv4Address, $Prefix, $Gateway, $DNS\n}\n# -*- Removes DHCP IP sets the Static ips which it has got from Get-ServerIPAddress.\nfunction Set-StaticIpAddress {\n  [CmdletBinding()]\n  Param(\n      [parameter(Mandatory=$true)]\n      [string]$Name,\n      [parameter(Mandatory=$true)]\n      [string]$IPType,\n      [parameter(Mandatory=$true)]\n      [string]$IPv4Address,\n      [parameter(Mandatory=$true)]\n      [string]$Prefix,\n      [parameter(Mandatory=$false)]\n      [string]$Gateway,\n      [parameter(Mandatory=$false)]\n      [array]$DNS\n  )\n\n  $adapter = Get-NetAdapter -Name $Name | ? {$_.Status -eq \"up\"}\n  If (($adapter | Get-NetIPConfiguration).IPv4Address.IPAddress) {\n      $adapter | Remove-NetIPAddress -AddressFamily $IPType -Confirm:$false\n  }\n  If (($adapter | Get-NetIPConfiguration).Ipv4DefaultGateway) {\n      $adapter | Remove-NetRoute -AddressFamily $IPType -Confirm:$false\n  }\n  if ($Gateway){\n    $adapter | New-NetIPAddress -AddressFamily $IPType -IPAddress \"$IPv4Address\" -PrefixLength $Prefix -DefaultGateway \"$Gateway\"\n  }\n  else{\n    $adapter | New-NetIPAddress -AddressFamily $IPType -IPAddress \"$IPv4Address\" -PrefixLength $Prefix\n  }\n  if ($DNS){\n    $adapter | Set-DnsClientServerAddress -ServerAddresses $DNS\n  }\n}\n\n# -*- Configures AD Domain service\nfunction Configure-ActiveDirectory {\n  [CmdletBinding()]\n  Param(\n      [parameter(Mandatory=$true)]\n      [string]$DomainName,\n      [parameter(Mandatory=$true)]\n      [string]$Password,\n      [parameter(Mandatory=$false)]\n      [string]$DatabasePath=\"C:\\Windows\\NTDS\",\n      [parameter(Mandatory=$true)]\n      [string]$DomainMode,\n      [parameter(Mandatory=$true)]\n      [string]$ForestMode,\n      [parameter(Mandatory=$false)]\n      [string]$LogPath=\"C:\\Windows\\NTDS\",\n      [parameter(Mandatory=$false)]\n      [string]$SysvolPath=\"C:\\Windows\\SYSVOL\",\n      [parameter(Mandatory=$true)]\n      [string]$DomainType,\n      [parameter(Mandatory=$false)]\n      [string]$ChildDomainName\n  )\n  Import-Module ADDSDeployment\n\n  $secpasswd = ConvertTo-SecureString $Password -AsPlainText -Force\n  $credential = New-Object System.Management.Automation.PSCredential(\"$DomainName\\administrator\",$secpasswd)\n  $netbios = $DomainName.Split(\".\")[0].ToUpper()\n  Write-Output \"Configuring Domain services.\"\n  switch ($DomainType){\n    \"DC\"{\n      Install-ADDSForest -CreateDnsDelegation:$false -DatabasePath $DatabasePath -DomainMode $DomainMode -DomainName $DomainName -DomainNetbiosName $netbios -ForestMode $ForestMode -InstallDns:$true -LogPath $LogPath -NoRebootOnCompletion:$true -SysvolPath $SysvolPath -Force:$true -SafeModeAdministratorPassword $secpasswd\n    }\n    \"ADC\"{\n      Install-ADDSDomainController -NoGlobalCatalog:$false -CreateDnsDelegation:$false -CriticalReplicationOnly:$false -DatabasePath $DatabasePath -DomainName $DomainName -InstallDns:$true -LogPath $LogPath -NoRebootOnCompletion:$true -SiteName \"Default-First-Site-Name\" -SysvolPath $SysvolPath -Force:$true -SafeModeAdministratorPassword $secpasswd -Credential $credential\n    }\n    \"CDC\"{\n      Install-ADDSDomain -NoGlobalCatalog:$false -CreateDnsDelegation:$true -DatabasePath $DatabasePath -DomainMode $DomainMode -DomainType \"ChildDomain\" -InstallDns:$true -LogPath $LogPath -NewDomainName $ChildDomainName -NewDomainNetbiosName $ChildDomainName.ToUpper() -ParentDomainName $DomainName -NoRebootOnCompletion:$true -SiteName \"Default-First-Site-Name\" -SysvolPath $SysvolPath -Force:$true -SafeModeAdministratorPassword $secpasswd -Credential $credential\n    }\n    \"RODC\"{\n      Install-ADDSDomainController -AllowPasswordReplicationAccountName @(\"$netbios\\Allowed RODC Password Replication Group\") -NoGlobalCatalog:$false -CriticalReplicationOnly:$false -DatabasePath $DatabasePath -DenyPasswordReplicationAccountName @(\"BUILTIN\\Administrators\", \"BUILTIN\\Server Operators\", \"BUILTIN\\Backup Operators\", \"BUILTIN\\Account Operators\", \"$netbios\\Denied RODC Password Replication Group\") -DomainName $DomainName -InstallDns:$true -LogPath $LogPath -NoRebootOnCompletion:$true -ReadOnlyReplica:$true -SiteName \"Default-First-Site-Name\" -SysvolPath $SysvolPath -Force:$true -SafeModeAdministratorPassword $secpasswd -Credential $credential\n    }\n    default{\n      Write-Output \"Invalid DomainType\"\n    }\n}\n}\n# -*- Checks whether server has DHCP IP or Static IP.\n# -*- If DHCP it gets IP Details and sets them statically.\nif ($(Get-WmiObject -Class Win32_NetworkAdapterConfiguration -Filter IPEnabled=TRUE).DHCPEnabled){\n  $IPType, $IPv4Address, $Prefix, $Gateway, $DNS = Get-ServerIPAddress\n  if (\"@@{DOMAIN_TYPE}@@\" -eq \"DC\"){\n    $DNS = \"127.0.0.1\"\n  }\n  if (($IPType -eq $Null) -or ($IPv4Address -eq $Null) -or ($Prefix -eq $Null) -or ($Gateway -eq $Null)){\n    Write-Output \"Please pass ipaddress, prefix and gateway address.\"\n  }\n  else{\n    Set-StaticIpAddress \"Ethernet\" $IPType $IPv4Address $Prefix $Gateway $DNS\n  }\n}\nelse{\n  Write-Output \"Static IP Is already set\"\n}\n\nif (Check-ActiveDirectoryFeature){\n  Write-Output \"Active Directory already installed.\"\n}\nelse{\n  Install-ActiveDirectory\n}\n\nif (Check-DomainExistance){\n  Write-Output \"Domain exists already.\"\n}\nelse{\n  $MajorOSVersion= [string](Get-WmiObject Win32_OperatingSystem | Select-Object @{n=\"Major\";e={($_.Version.Split(\".\")[0]+\".\"+$_.Version.Split(\".\")[1])}}).Major\n  if ($MajorOSVersion -eq $WS2012R2_MAJOR){\n    $DomainMode = \"Win2012R2\"\n  }elseif ($MajorOSVersion -eq $WS2016_MAJOR){\n    $DomainMode = \"WinThreshold\"\n  }\n  Configure-ActiveDirectory -DomainName \"@@{DOMAIN}@@\" -Password \"@@{ADMIN_PASSWORD}@@\" -DomainMode $DomainMode -ForestMode $DomainMode -DomainType \"@@{DOMAIN_TYPE}@@\" -ChildDomainName \"@@{CHILD_DOMAIN}@@\"\n}\nStart-Sleep -Seconds 5\n\nRestart-Computer -Force -AsJob\nexit 0",
            "creation_time":1478700454,
            "credential_id":"",
            "modification_time":1489645663,
            "version":310,
            "critical":false,
            "editables":[

            ],
            "name":"InstallAD"
        },
        {
            "uid":"58c969284922937b2bfaee69",
            "classification":"runshell",
            "script":"$HOSTNAME = \"@@{VMNAME}@@\"\nfunction Set-Hostname{\n  [CmdletBinding()]\n  Param(\n      [parameter(Mandatory=$true)]\n      [string]$Hostname\n)\n  if ($Hostname -eq  $(hostname)){\n    Write-Output \"Hostname already set.\"\n  }\n  else{\n    Rename-Computer -NewName $HOSTNAME -ErrorAction Stop\n  }\n}\n\nfunction JointoDomain {\n  [CmdletBinding()]\n  Param(\n      [parameter(Mandatory=$true)]\n      [string]$DomainName,\n      [parameter(Mandatory=$false)]\n      [string]$OU,\n      [parameter(Mandatory=$true)]\n      [string]$Username,\n      [parameter(Mandatory=$true)]\n      [string]$Password,\n      [parameter(Mandatory=$true)]\n      [string]$Server\n  )\n  $adapter = Get-NetAdapter | ? {$_.Status -eq \"up\"}\n  $adapter | Set-DnsClientServerAddress -ServerAddresses $Server\n\n  if ($env:computername  -eq $env:userdomain) {\n    Write-Output \"Not in domain\"\n    $adminname = \"$DomainName\\$Username\"\n    $adminpassword = ConvertTo-SecureString -asPlainText -Force -String \"$Password\"\n    Write-Output \"$adminname , $password\"\n    $credential = New-Object System.Management.Automation.PSCredential($adminname,$adminpassword)\n    Add-computer -DomainName $DomainName -Credential $credential -force -Options JoinWithNewName,AccountCreate -PassThru -ErrorAction Stop\n  }\n  else {\n     Write-Output \"Already in domain\"\n  }\n}\n\nif ($HOSTNAME -ne $Null){\n  Write-Output \"Setting Hostname\"\n  Set-Hostname -Hostname $HOSTNAME\n}\n\nif(\"@@{DOMAIN_TYPE}@@\" -eq \"DC\"){\n  Restart-Computer -Force -AsJob\n  exit 0\n}\nJointoDomain -DomainName \"@@{DOMAIN}@@\" -Username \"@@{ADMIN_USER}@@\" -Password \"@@{ADMIN_PASSWORD}@@\" -Server \"@@{SERVER}@@\"\n\nRestart-Computer -Force -AsJob\nexit 0",
            "creation_time":1478792803,
            "credential_id":null,
            "modification_time":1489645663,
            "version":279,
            "critical":false,
            "editables":[

            ],
            "name":"JoinDomain"
        },
        {
            "uid":"58c969284922937b2bfaee6c",
            "classification":"eval_escript",
            "script":"#script\nsleep(50)",
            "out_args":[
                "KEY"
            ],
            "creation_time":1479988626,
            "credential_id":null,
            "modification_time":1489645663,
            "version":268,
            "critical":true,
            "editables":[

            ],
            "name":"Sleep"
        },
        {
            "vm_source":"\/vm\/Win2012R2Base",
            "vm_name":"@@{VMNAME}@@",
            "uid":"58c969284922937b2bfaee6d",
            "classification":"provision_vcenter",
            "esxi_host":"10.7.2.224",
            "customization_template_data":null,
            "creation_time":1478796782,
            "variable_cost":0.0,
            "credential_id":"58c969284922937b2bfaee5c",
            "modification_time":1489645663,
            "vapp_name":null,
            "version":100,
            "critical":true,
            "editables":[

            ],
            "datastore":"calmdev2-datastore",
            "fixed_cost":null,
            "customization_template_id":null,
            "name":"Provision vCenter"
        },
        {
            "uid":"58c969284922937b2bfaee6e",
            "classification":"runshell",
            "script":"netsh advfirewall firewall set rule group=\"Windows Management Instrumentation (WMI)\" new enable=yes",
            "creation_time":1478797845,
            "credential_id":null,
            "modification_time":1489645663,
            "version":252,
            "critical":false,
            "editables":[

            ],
            "name":"InitialConfig"
        }
    ],
    "uid":"58c969284922937b2bfaee5a",
    "classification":"blueprint",
    "autoscale_config":{
        "post_flow":null,
        "cool_down_period":"1800",
        "uid":"58232da65d698e2fec0d58d2",
        "classification":null,
        "alert_count":"1",
        "max_count":"1",
        "pre_flow":null,
        "min_count":"1",
        "listen_for":"external",
        "scale_by":"1",
        "alert_window":"1800"
    },
    "profiles":[
        {
            "cost":0.0,
            "uid":"58c969284922937b2bfaee70",
            "classification":"resource_profile",
            "service_port":5985,
            "address":"@@{vm_ip}@@",
            "creation_time":1478700454,
            "modification_time":1489645663,
            "version":133,
            "provider":"58c969284922937b2bfaee67",
            "service_type":"powershell",
            "automatic_cost":false,
            "os_type":"Windows",
            "properties":[
                {
                    "uid":"582499005d698e081010f70c",
                    "classification":null,
                    "url":null,
                    "editable":false,
                    "value":null,
                    "key":"SERVER_IP",
                    "property_description":null,
                    "property_type":"INTERNAL",
                    "setter":{
                        "source_id":"58c969284922937b2bfaee67",
                        "uid":"58c96a304922937b2bfaf3ae",
                        "classification":null,
                        "prop":"vm_ip"
                    }
                }
            ],
            "name":"Nutanix"
        },
        {
            "cost":0.0,
            "uid":"58c969284922937b2bfaee71",
            "classification":"resource_profile",
            "service_port":5985,
            "address":"@@{vm_machine_ip}@@",
            "creation_time":1478796782,
            "modification_time":1489645663,
            "version":100,
            "provider":"58c969284922937b2bfaee6d",
            "service_type":"powershell",
            "automatic_cost":false,
            "os_type":"Windows",
            "properties":[
                {
                    "uid":"5824a5ee5d698e083ba7b908",
                    "classification":null,
                    "url":null,
                    "editable":false,
                    "value":null,
                    "key":"SERVER_IP",
                    "property_description":null,
                    "property_type":"INTERNAL",
                    "setter":{
                        "source_id":"58c969284922937b2bfaee6d",
                        "uid":"5824a5ee5d698e083ba7b9a0",
                        "classification":null,
                        "prop":"vm_machine_ip"
                    }
                }
            ],
            "name":"Vcenter"
        }
    ],
    "strategy_enabled":false,
    "replaced_tasks":{

    },
    "environment":"default",
    "config":{
        "setup":[

        ],
        "uid":"58232da65d698e2fec0d58d3",
        "classification":null,
        "deploy":[

        ]
    },
    "calm-version":"1.8.3",
    "description":null,
    "parent":null,
    "flows":[

    ],
    "dependencies":[

    ],
    "credentials":[
        {
            "username":"administrator",
            "public_key":null,
            "uid":"58c969284922937b2bfaee5c",
            "classification":null,
            "secret_type":"password",
            "creation_time":1478700471,
            "modification_time":1489645663,
            "secret":null,
            "version":132,
            "name":"WIN"
        }
    ],
    "bp_id":null,
    "properties":[
        {
            "uid":"58240acb5d698e302089578c",
            "classification":null,
            "url":null,
            "editable":true,
            "value":"nucalm.com",
            "key":"DOMAIN",
            "property_description":null,
            "property_type":"INTERNAL",
            "setter":null
        },
        {
            "uid":"582496855d698e083ba7a4cf",
            "classification":null,
            "url":null,
            "editable":true,
            "value":"AD-DC01",
            "key":"VMNAME",
            "property_description":null,
            "property_type":"INTERNAL",
            "setter":null
        },
        {
            "uid":"582497f95d698e083ba7a584",
            "classification":null,
            "url":null,
            "editable":true,
            "value":"DC",
            "key":"DOMAIN_TYPE",
            "property_description":null,
            "property_type":"INTERNAL",
            "setter":null
        },
        {
            "uid":"582497f95d698e083ba7a585",
            "classification":null,
            "url":null,
            "editable":true,
            "value":"administrator",
            "key":"ADMIN_USER",
            "property_description":null,
            "property_type":"INTERNAL",
            "setter":null
        },
        {
            "uid":"582497f95d698e083ba7a586",
            "classification":null,
            "url":null,
            "editable":true,
            "value":"nutanix\/4u",
            "key":"ADMIN_PASSWORD",
            "property_description":null,
            "property_type":"INTERNAL",
            "setter":null
        },
        {
            "uid":"5824996f5d698e083ba7a6e8",
            "classification":null,
            "url":null,
            "editable":true,
            "value":null,
            "key":"SERVER",
            "property_description":null,
            "property_type":"INTERNAL",
            "setter":null
        },
        {
            "uid":"586c7bba4922936d9c139824",
            "classification":null,
            "url":null,
            "editable":true,
            "value":null,
            "key":"CHILD_DOMAIN",
            "property_description":null,
            "property_type":"INTERNAL",
            "setter":null
        }
    ],
    "autoscale_enabled":false,
    "name":"Nu_ActiveDirectory",
    "setup_ids":{

    },
    "h":0.0,
    "resiliency_config":{
        "post_flow":null,
        "cool_down_period":"1800",
        "alert_window":"1800",
        "classification":null,
        "alert_count":"1",
        "pre_flow":null,
        "listen_for":"internal",
        "uid":"58232da65d698e2fec0d58d4"
    },
    "current_profile":null,
    "resiliency_enabled":false,
    "architecture":[
        {
            "tasks":[

            ],
            "uid":"cid:00000001",
            "classification":"compute",
            "autoscale_config":{
                "post_flow":null,
                "cool_down_period":"1800",
                "uid":"58232da65d698e2fec0d58c8",
                "classification":null,
                "alert_count":"1",
                "max_count":"1",
                "pre_flow":null,
                "min_count":"1",
                "listen_for":"external",
                "scale_by":"1",
                "alert_window":"1800"
            },
            "profiles":[
                "58c969284922937b2bfaee70",
                "58c969284922937b2bfaee71"
            ],
            "strategy_enabled":false,
            "config":{
                "setup":[

                ],
                "uid":"58232da65d698e2fec0d58cb",
                "classification":null,
                "deploy":[
                    "58c969284922937b2bfaee6e",
                    "58c969284922937b2bfaee69",
                    "58c969284922937b2bfaee6c",
                    "58c969284922937b2bfaee68"
                ]
            },
            "parent":"58c969284922937b2bfaee5a",
            "flows":[

            ],
            "dependencies":[

            ],
            "bp_id":"58c969284922937b2bfaee5a",
            "properties":[

            ],
            "autoscale_enabled":false,
            "name":"AD",
            "h":0.0,
            "resiliency_config":{
                "post_flow":null,
                "cool_down_period":"1800",
                "alert_window":"1800",
                "classification":null,
                "alert_count":"1",
                "pre_flow":null,
                "listen_for":"internal",
                "uid":"58232da65d698e2fec0d58c9"
            },
            "current_profile":"58c969284922937b2bfaee70",
            "resiliency_enabled":false,
            "w":0.0,
            "strategy_config":{
                "post_flow":null,
                "rollback_pre_flow":null,
                "classification":null,
                "rolling_factor":"100",
                "initial_version":null,
                "approval_flag":false,
                "upgrade_flow":null,
                "rollback_flow":null,
                "pre_flow":null,
                "rollback_post_flow":null,
                "upgrade_type":"rolling_upgrade",
                "uid":"58232da65d698e2fec0d58ca",
                "users":[

                ],
                "teams":[

                ],
                "emails":[

                ],
                "initial_count":"1"
            },
            "y":171.0,
            "x":325.0
        }
    ],
    "w":0.0,
    "strategy_config":{
        "post_flow":null,
        "rollback_pre_flow":null,
        "classification":null,
        "rolling_factor":"100",
        "initial_version":null,
        "approval_flag":false,
        "upgrade_flow":null,
        "rollback_flow":null,
        "pre_flow":null,
        "rollback_post_flow":null,
        "upgrade_type":"rolling_upgrade",
        "uid":"58232da65d698e2fec0d58d5",
        "users":[

        ],
        "teams":[

        ],
        "emails":[

        ],
        "initial_count":"1"
    },
    "y":0.0,
    "x":0.0
}