{"status":{},"contains_secrets":false,"product_version":"3.5.0","spec":{"description":"","resources":{"endpoints_information":[],"endpoint_definition_list":[],"client_attrs":{},"credential_definition_list":[{"username":"kazi.ahmed@gso.lab","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"PC_Creds","cred_class":"static"}],"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Got VM Info"},{"kind":"app_task","name":"Move Host Or Not"},{"kind":"app_task","name":"Proceed or Not"}],"name":"1f9712b8_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Got VM Info"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Move Host Or Not"}},{"from_task_reference":{"kind":"app_task","name":"Move Host Or Not"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Proceed or Not"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Got VM Info","attrs":{"script":"print \"VM name {}, UUID {} and OS Type {}\".format(\"@@{vm_name}@@\",\"@@{vm_uuid}@@\",\"@@{host_category_value}@@\") ","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Move Host Or Not","attrs":{"exit_status":[],"script":"user = \"@@{PC_Creds.username}@@\"\npassword = \"@@{PC_Creds.secret}@@\"\nip = \"@@{PC_IP}@@\"\nvm_uuid=\"@@{vm_uuid}@@\"\n#build host type arrays\nlinuxHostsList = \"@@{targetLinuxHostValues}@@\".replace(\" \", \"\") \nlinuxHosts = linuxHostsList.split(\",\")\nmovingForward = False\nwinHostsList = \"@@{targetWindowsHostValues}@@\".replace(\" \", \"\") \nwinHosts = winHostsList.split(\",\")\n\npayload = {}\ndef process_request(url, method, user, password, headers, payload=None):\n  r = urlreq(url, verb=method, auth=\"BASIC\", user=user, passwd=password, params=payload, verify=False, headers=headers)\n  return r\n\nbase_url = \"https:\/\/\" + ip + \":9440\/api\/nutanix\/v3\/vms\"\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"GET\"\nurl = base_url + \"\/{}\".format(vm_uuid)\n#print \"R2 URL: {}\".format(url)\nr2 = process_request(url, url_method, user, password, headers, json.dumps(payload))\nprint \"R2 Status Code: {}\".format(r2.status_code)\n#print \"R2 Output: {}\".format(r2.text)\nif r2.ok:\n  vm_json = r2.json()\n  currentHost = vm_json[\"status\"][\"resources\"][\"host_reference\"][\"name\"]\n  if \"@@{host_category_value}@@\" == \"Linux\":\n      if currentHost in linuxHosts:\n        print \"VM is already in the right linux host\"\n      else:\n        movingForward = True\n        print \"targetHostToMoveTo = {}\".format(linuxHosts[0])\n  else:\n     if currentHost in winHosts:\n        print \"VM is already in the right windows host\"\n     else:\n        movingForward = True\n        print \"targetHostToMoveTo = {}\".format(winHosts[0])\n  print \"movingForward = {}\".format(movingForward)      \n\nelse:\n  print \"Unable to retrieve VM: {}\".format(\"@@{vm_name}@@\")\n  print \"movingForward = {}\".format(movingForward)\n  exit(1)","eval_variables":["targetHostToMoveTo","movingForward"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Proceed or Not","attrs":{"failure_child_reference":{"kind":"app_task","name":"8c60025c_FAILURE_META"},"exit_status":[],"script":"movingForward = @@{movingForward}@@\n\nif movingForward == True:\n   exit(0)\nelse:\n   exit(1)","success_child_reference":{"kind":"app_task","name":"3f2e618e_SUCCESS_META"},"type":"","command_line_args":"","script_type":"static"},"timeout_secs":"0","type":"DECISION","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Create Categories"},{"kind":"app_task","name":"Apply Categories to Host"},{"kind":"app_task","name":"Apply Categories to VMs"},{"kind":"app_task","name":"Create Affinity Rules"}],"name":"3f2e618e_SUCCESS_META","attrs":{"type":""},"timeout_secs":"0","type":"META","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Create Categories","attrs":{"script":"vm_category_value=\"@@{targetHostToMoveTo}@@\"\n\ndef setup_category(category_name, category_value):   \n\n    pc_ip = '@@{PC_IP}@@'\n    user = \"@@{PC_Creds.username}@@\"\n    password = \"@@{PC_Creds.secret}@@\"\n    #jwt = '@@{calm_jwt}@@'\n    base_url = \"https:\/\/{}:9440\/api\/nutanix\/v3\".format(pc_ip)\n\n    #headers = {'Content-Type': 'application\/json',  'Accept':'application\/json', 'Authorization': 'Bearer {}'.format(jwt)}\n    headers = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\n\n    #project_name = \"@@{project_name}@@\"\n    \n\n    ### --------------------------------------------------------------------------------- ###\n    def create_category_name(base_url, headers, user, password, category_name):\n        method = 'PUT'\n        url = base_url + \"\/categories\/{}\".format(category_name)\n        payload = { \"api_version\": \"3.1.0\", \"name\": category_name }\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            headers=headers,\n            verify=False,\n            auth=\"BASIC\", \n            user=user, \n            passwd=password\n        )\n\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            return json_resp[\"name\"]\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    ### --------------------------------------------------------------------------------- ### \n\n    ### --------------------------------------------------------------------------------- ###\n    def create_category_value(base_url, headers, user, password, category_name, category_value):\n        method = 'PUT'\n        url = base_url + \"\/categories\/{0}\/{1}\".format(category_name,category_value)\n        payload = { \"api_version\": \"3.1.0\", \"value\": category_value }\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            params=json.dumps(payload),\n            headers=headers,\n            verify=False,\n            auth=\"BASIC\", \n            user=user, \n            passwd=password\n        )\n\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            return json_resp[\"value\"]\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    ### --------------------------------------------------------------------------------- ### \n\n    ### --------------------------------------------------------------------------------- ### \n    create_category_name(base_url, headers, user, password, category_name)\n    create_category_value(base_url, headers, user, password, category_name, category_value)\n    ### --------------------------------------------------------------------------------- ###         \n\nsetup_category(\"@@{host_category_name}@@\",\"@@{host_category_value}@@\")\nsetup_category(\"@@{vm_category_name}@@\",vm_category_value)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Apply Categories to Host","attrs":{"script":"user = \"@@{PC_Creds.username}@@\"\npassword = \"@@{PC_Creds.secret}@@\"\nip = \"@@{PC_IP}@@\"\nhosts = \"@@{targetHostToMoveTo}@@\"\n\nif len(hosts): \n  print \"selected hosts: {0}\".format(hosts)\nelse: \n  print(\"hosts is empty\")\n  exit(1)\n\nselected_hosts_name = hosts.split(\",\")\n#print selected_hosts_name\npayload = {\n \n}\ndef process_request(url, method, user, password, headers, payload=None):\n  r = urlreq(url, verb=method, auth=\"BASIC\", user=user, passwd=password, params=payload, verify=False, headers=headers)\n  return r\n\nbase_url = \"https:\/\/\" + ip + \":9440\/api\/nutanix\/v3\/hosts\"\nurl = base_url + \"\/list\"\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"POST\"\n\nr = process_request(url, url_method, user, password, headers, json.dumps(payload))\n#print \"Retrieve Host List Status code: {}\".format(r.status_code)\n#print \"Output: {}\".format(r.text)\nhost_uuid_list = []\nif r.ok:\n  host_json = r.json()\n  for host in host_json['entities']:\n    current_host_spec = host['spec']\n    if 'name' in current_host_spec:\n      current_host_name = host['spec']['name']\n      # print \"Loop the Host Name: {}\".format(current_host_name)\n      for selected_host in selected_hosts_name:\n       # print \"for loop for selected_host: {}\".format(selected_host)\n        if (current_host_name == selected_host):\n          #print \"came here Selected Host Name: {}\".format(current_host_name)\n      #  print \"Host_uuid={}\".format(host['metadata']['uuid'])\n          host_uuid_list.append(host['metadata']['uuid'])\n          break\n        else:\n          continue\n    else:\n     # print \"host name is null\"\n      continue\n      \n      \n  print \"Selected_Hosts_UUID_List={}\".format(host_uuid_list)\nelse:\n  exit(1)\n  \npayload2 = {\n}\n\ncategories_mapping = {\n  \"@@{host_category_name}@@\": [\n  \"@@{host_category_value}@@\"\n  ]\n}\ncategories = {\n  \"@@{host_category_name}@@\": \"@@{host_category_value}@@\"\n}\nurl_method2 = \"GET\"\n\nfor selected_host in host_uuid_list:\n\n  url2 = \"https:\/\/\" + ip + \":9440\/api\/nutanix\/v3\/hosts\/\" + selected_host\n  #print \"Associate host with category url: {}\".format(url2)\n  r2 = process_request(url2, url_method2, user, password, headers, json.dumps(payload2))\n  #print \"Retrieve Host Detail Status Code: {0}\".format(r2.status_code)\n  #print \"Output: {0}\".format(r2.text)\n  if r2.ok:\n    selected_host_json = r2.json()\n    del selected_host_json['status']\n    del selected_host_json['metadata']['categories']\n    del selected_host_json['metadata']['categories_mapping']\n    selected_host_json['metadata']['categories_mapping'] = categories_mapping\n    selected_host_json['metadata']['categories'] = categories\n    print \"Put JSON: {0}\".format(selected_host_json)\n    r3 = process_request(url2, \"PUT\", user, password, headers, json.dumps(selected_host_json))\n    print \"Update Host with category status code: {0}\".format(r3.status_code)\n    print \"Output: {0}\".format(r3.text)\n    if r3.ok:\n      print \"Host name: {0} updated with categories\".format(selected_host_json['spec']['name'])\n    else:\n      exit(1)\n  else:\n    exit(1)\n\n    \n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Apply Categories to VMs","attrs":{"script":"user = \"@@{PC_Creds.username}@@\"\npassword = \"@@{PC_Creds.secret}@@\"\nvm_category_value= \"@@{targetHostToMoveTo}@@\"\nip = \"@@{PC_IP}@@\"\n\npayload = {\n  \"filter\": \"vm_name==@@{vm_name}@@\"\n \n}\ndef process_request(url, method, user, password, headers, payload=None):\n  r = urlreq(url, verb=method, auth=\"BASIC\", user=user, passwd=password, params=payload, verify=False, headers=headers)\n  return r\n\nbase_url = \"https:\/\/\" + ip + \":9440\/api\/nutanix\/v3\/vms\"\nurl = base_url + \"\/list\"\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"POST\"\n\nr = process_request(url, url_method, user, password, headers, json.dumps(payload))\nprint \"Retrieve VM List Status code: {}\".format(r.status_code)\nprint \"Output: {}\".format(r.text)\nvm_uuid = \"empty\"\nif r.ok:\n  vm_json = r.json()\n  for vm in vm_json['entities']:\n    current_vm_spec = vm['spec']\n    if 'name' in current_vm_spec:\n      if (vm['spec']['name'] == \"@@{vm_name}@@\"):\n        vm_uuid = vm['metadata']['uuid']\n        break\n      else:\n        continue\nelse:\n  exit(1)\n  \nprint \"vm_uuid={}\".format(vm_uuid)\nif vm_uuid==\"empty\":\n  exit(1)\n  \npayload2 = {\n}\n\nurl_method2 = \"GET\"\nurl2 = base_url + \"\/{}\".format(vm_uuid)\nprint \"url2: {}\".format(url2)\nr2 = process_request(url2, url_method2, user, password, headers, json.dumps(payload2))\nprint \"R2 Status Code: {}\".format(r2.status_code)\nprint \"R2 Output: {}\".format(r2.text)\nif r2.ok:\n  vm_json = r2.json()\nelse:\n  print \"Unable to retrieve VM: {}\".format(\"@@{vm_name}@@\")\n  exit(1)\n\ncategories_mapping = {\n  \"@@{vm_category_name}@@\": [\n    vm_category_value\n  ]\n}\ncategories = {\n  \"@@{vm_category_name}@@\": vm_category_value\n}\n\ndel vm_json['status']\ndel vm_json['metadata']['categories']\ndel vm_json['metadata']['categories_mapping']\nvm_json['metadata']['categories_mapping'] = categories_mapping\nvm_json['metadata']['categories'] = categories\nprint \"Put JSON: {0}\".format(vm_json)\nurl3 = base_url + \"\/{}\".format(vm_uuid)\nr3 = process_request(url2, \"PUT\", user, password, headers, json.dumps(vm_json))\nprint \"Update VM with category status code: {0}\".format(r3.status_code)\nprint \"Output: {0}\".format(r3.text)\nif r3.ok:\n  print \"VM name: {0} updated with categories\".format(\"@@{vm_name}@@\")\nelse:\n  exit(1)\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Create Affinity Rules","attrs":{"script":"user = \"@@{PC_Creds.username}@@\"\npassword = \"@@{PC_Creds.secret}@@\"\nip = \"@@{PC_IP}@@\"\nvm_category_value = \"@@{targetHostToMoveTo}@@\"\n\npayload = {\n  \"config\": {\n    \"vm_categories\": {\n      \"@@{vm_category_name}@@\": [\n        vm_category_value\n       ]\n    },\n    \"description\": \"VM affinity policy created using Nutanix Calm\",\n    \"host_categories\": {\n      \"@@{host_category_name}@@\": [\n        \"@@{host_category_value}@@\"\n      ]\n    },\n    \"name\": \"@@{vm_affinity_policy}@@\"\n  }\n}\nprint \"Payload: {}\".format(json.dumps(payload))\n\ndef process_request(url, method, user, password, headers, payload=None):\n  r = urlreq(url, verb=method, auth=\"BASIC\", user=user, passwd=password, params=payload, verify=False, headers=headers)\n  return r\n\nbase_url = \"https:\/\/\" + ip + \":9440\/api\/nutanix\/v3\/vm_host_affinity_policies\"\nurl = base_url\nheaders = {'Accept': 'application\/json', 'Content-Type': 'application\/json'}\nurl_method = \"POST\"\n\nr = process_request(url, url_method, user, password, headers, json.dumps(payload))\nprint \"Status code: {}\".format(r.status_code)\nprint \"Output: {}\".format(r.text)\nif r.ok:\n  print \"VM Affinity Policy created\"\nelse:\n  print \"Error creating VM Affinity Policy\"\n  exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Do Nothing"}],"name":"8c60025c_FAILURE_META","attrs":{"type":""},"timeout_secs":"0","type":"META","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Do Nothing","attrs":{"script":"print \"No further action would be taken\"","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"ff1d8469_runbook","main_task_local_reference":{"kind":"app_task","name":"1f9712b8_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"vm_category_value","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"vm_category_name","value":"HostedNode","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"host_category_name","value":"HostType","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"targetWindowsHostValues","value":"GROOT-C","label":"","attrs":{"type":"LOCAL"},"editables":{"value":false},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["GROOT-C","GROOT-D"]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"targetLinuxHostValues","value":"GROOT-A","label":"","attrs":{"type":"LOCAL"},"editables":{"value":false},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["GROOT-A","GROOT-B"]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PC_IP","value":"10.48.108.12","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"vm_name","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"vm_uuid","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"host_category_value","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]}},"name":"Auto Update VM Hosts"},"api_version":"3.0","metadata":{"last_update_time":"1655576809708934","kind":"runbook","spec_version":22,"creation_time":"1655255340594570","name":"Auto Update VM Hosts"}}