{"status":{},"contains_secrets":false,"product_version":"3.0.0.2","spec":{"description":"Detail:\n---------\nAutomates the deployment of the KPS Service Domain VM\nGathers the SD Serial Number from HTTP service\nRegisters SD in the KPS portal\nWhen deleting the application, the object is deleted from the KPS portal\n\nRequirements:\n---------------------\n- IPAM Enabled Network\n- API Token, can be created on the KPS Portal\n- For Multinode Deployment there is an Virtual IP needed and additional PE Details\n","resources":{"client_attrs":{"31fbb160_deployment":{"y":275.2226422219,"x":179.8107704711},"None":{"y":397.1887244316,"x":591.5661732949}},"service_definition_list":[{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"SD Deploy and Register"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"2a7b8303_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"3d8b39d8_runbook","main_task_local_reference":{"kind":"app_task","name":"2a7b8303_dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"SD Deploy and Register"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"68784150_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"4e9d977b_runbook","main_task_local_reference":{"kind":"app_task","name":"68784150_dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"SD Deploy and Register"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"08b5270b_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"6caf8b00_runbook","main_task_local_reference":{"kind":"app_task","name":"08b5270b_dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"SD Deploy and Register"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"502ce5fe_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"061e03c1_runbook","main_task_local_reference":{"kind":"app_task","name":"502ce5fe_dag"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"SD Deploy and Register"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"8c96cd45_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"a2dd57d6_runbook","main_task_local_reference":{"kind":"app_task","name":"8c96cd45_dag"},"variable_list":[]},"name":"action_restart"}],"depends_on_list":[],"name":"SD Deploy and Register","port_list":[],"tier":"","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"sd_id","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}],"description":""}],"substrate_definition_list":[{"description":"","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"SD_VM"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Create Service Domain"},{"kind":"app_task","name":"Create Storage Profile"}],"name":"bdc58d37_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Create Service Domain"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Create Storage Profile"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"SD_VM"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Create Service Domain","attrs":{"exit_status":[],"script":"# \/usr\/bin\/python3\n\n#Only run once for the first Replica\n\nif @@{calm_array_index}@@==0:\n  '''\n  This section creates the Service Domain object in the KPS portal\n  '''\n\n  if @@{node_count}@@==1:\n    body = {\"description\": \"@@{sddesc}@@\",\n            \"name\": \"@@{sdname}@@\"\n           }\n  else:\n    body = {\"description\": \"@@{sddesc}@@\",\n            \"name\": \"@@{sdname}@@\",\n            \"virtualIP\": \"@@{VirtualIP}@@\"\n           }\n\n  # Create the URLs for this call\n  iotbaseURL = \"https:\/\/karbon.nutanix.com\/\"\n  iotapiurl = \"v1.0\/servicedomains\"\n  ioturl = iotbaseURL+iotapiurl\n\n  # Set the Headers\n  iotHeaders = {\"Accept\" : \"application\/json\", \"Authorization\" : \"Bearer \" + \"@@{APIToken}@@\"}\n\n  # Make the call\n  resp = urlreq(ioturl, verb='POST', params=json.dumps(body), headers=iotHeaders, verify=False)\n\n  if resp.ok:\n          sd_id = json.loads(resp.content)['id']\n          print(\"sd_id=\"+sd_id)\n\n  else:\n          print(\"Adding Service Domain to KPS\"), json.dumps(json.loads(resp.content), indent=4)\n          print(iotHeaders)\n\n","eval_variables":["sd_id"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"SD_VM"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Create Storage Profile","attrs":{"script":"# \/usr\/bin\/python3\n\n#Only run once for the first Replica\n\nif (@@{calm_array_index}@@==0)&(@@{node_count}@@==3):\n  '''\n  This section creates the Storage Profile for the Multinode Service Domain in the KPS portal\n  '''\n\n\n  body = {\n    \"name\": \"@@{sdname}@@-storageprofile\",\n    \"type\": \"NutanixVolumes\",\n    \"isDefault\": True,\n    \"nutanixVolumesConfig\": \n    {\n      \"dataServicesIP\": \"@@{dataServicesIP}@@\",\n      \"dataServicesPort\": 3260,\n      \"flashMode\": False,\n      \"prismElementClusterPort\": 9440,\n      \"prismElementClusterVIP\": \"@@{prismElementClusterVIP}@@\",\n      \"prismElementPassword\": \"@@{prismElementPassword}@@\",\n      \"prismElementUserName\": \"@@{prismElementUserName}@@\",\n      \"storageContainerName\": \"@@{storageContainerName}@@\"\n    }\n  }\n\n  # Create the URLs for this call\n  iotbaseURL = \"https:\/\/karbon.nutanix.com\/\"\n  iotapiurl = \"v1.0\/servicedomains\/@@{sd_id}@@\/storageprofiles\"\n  ioturl = iotbaseURL+iotapiurl\n\n  # Set the Headers\n  iotHeaders = {\"Accept\" : \"application\/json\", \"Authorization\" : \"Bearer \" + \"@@{APIToken}@@\"}\n\n  # Make the call\n  resp = urlreq(ioturl, verb='POST', params=json.dumps(body), headers=iotHeaders, verify=False)\n\n  if resp.ok:\n          print(\"Storage Profile created\")\n\n  else:\n          print(\"Adding Storage Profile to Service Domain\"), json.dumps(json.loads(resp.content), indent=4)\n          print(iotHeaders)\n\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"709132d7_runbook","main_task_local_reference":{"kind":"app_task","name":"bdc58d37_dag"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"SD_VM"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Remove Service Domain"}],"name":"940a84f2_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"SD_VM"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Remove Service Domain","attrs":{"script":"# \/usr\/bin\/python3\n\n#Only run once for the first Replica\n\nif @@{calm_array_index}@@==0:\n  '''\n  This section removes the Service Domain object from the KPS portal\n  '''\n\n\n  # Create the URLs for this call\n  iotbaseURL = \"https:\/\/karbon.nutanix.com\/\"\n  iotapiurl = \"v1.0\/servicedomains\/@@{calm_array_sd_id}@@\"\n  ioturl = iotbaseURL+iotapiurl\n\n  # Set the Headers\n  iotHeaders = {\"Accept\" : \"application\/json\", \"Authorization\" : \"Bearer \" + \"@@{APIToken}@@\"}\n\n  # Make the call\n  resp = urlreq(ioturl, verb='DELETE',  headers=iotHeaders, verify=False)\n\n  if resp.ok:\n          sd_id = json.loads(resp.content)['id']\n          print(\"Service Domain removed\")\n\n  else:\n          print(\"Removing Service Domain from KPS\"), json.dumps(json.loads(resp.content), indent=4)\n          print(iotHeaders)\n\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"c5215f46_runbook","main_task_local_reference":{"kind":"app_task","name":"940a84f2_dag"},"variable_list":[]},"name":"post_action_delete"}],"type":"AHV_VM","name":"SD_VM","readiness_probe":{"connection_type":"SSH","retries":"5","connection_protocol":"","connection_port":22,"address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","delay_secs":"60","disable_readiness_probe":true},"editables":{"create_spec":{"resources":{"nic_list":{},"serial_port_list":{},"boot_config":true,"disk_list":{}}}},"os_type":"Linux","create_spec":{"name":"@@{sdname}@@@@{calm_time}@@","resources":{"nic_list":[{"nic_type":"NORMAL_NIC","ip_endpoint_list":[],"network_function_chain_reference":null,"network_function_nic_type":"INGRESS","mac_address":"","subnet_reference":{"kind":"subnet","type":"","name":"","uuid":"7923f6f6-483f-4dea-ade9-a02d781139f9"},"type":""}],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":1,"num_sockets":8,"gpu_list":[],"memory_size_mib":16384,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":{"cloud_init":{"meta_data":"","type":"","user_data":"#cloud-config\n\nusers:\n  - name: admin\n    sudo: ['ALL=(ALL) NOPASSWD:ALL']"},"type":"","sysprep":null},"power_state":"ON","type":"","account_uuid":"2524d569-1636-4955-9040-e704ab341f38","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","boot_type":"","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"image","type":"","name":"kps2.1","uuid":"2aabb768-bbc6-4c7f-ab36-3bf44bf9bd29"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":null,"categories":""},"variable_list":[]}],"credential_definition_list":[{"username":"wolfgang.huse@nutanix.com","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"KPS Tenant"}],"package_definition_list":[{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"SD Deploy and Register"}],"name":"Get Edge Serial","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Get Edge Serial"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Get Serial Number"},{"kind":"app_task","name":"Add Node"}],"name":"198d629d_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Get Serial Number"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Add Node"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"SD Deploy and Register"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Get Serial Number","attrs":{"expected_response_params":[{"status":"SUCCESS","code":200,"type":""}],"request_body":"","headers":[],"url":"http:\/\/@@{address}@@:8080\/v1\/sn","response_paths":{"edgeserial":"*"},"retry_interval":10,"method":"GET","retry_count":10,"authentication":{"type":"none"},"tls_verify":false,"content_type":"text\/html","connection_timeout":120,"type":"","proxy_type":""},"timeout_secs":"0","type":"HTTP","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"SD Deploy and Register"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Add Node","attrs":{"script":"# \/usr\/bin\/python3\n\n'''\nThis section captures the Subnet and Gateway values for the VM\nThis is why the blueprint requires the IPAM service to be configured\n'''\n\n# First we have to get the network UUID from the VM\n# Set the JWT, headers and payload\njwt     = '@@{calm_jwt}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json', 'Authorization': 'Bearer {}'.format(jwt)}\n\n# Set the address for Subnet call\nurl = \"https:\/\/localhost:9440\/api\/nutanix\/v3\/subnets\/@@{platform.status.resources.nic_list[0].subnet_reference.uuid}@@\"\n\n# Make the Subnets GET Call\nresp = urlreq(url, verb='GET', headers=headers, verify=False)\n\n# If the Subnets call went through successfully\nif resp.ok:\n        subnetcidr = json.loads(resp.content)['spec']['resources']['ip_config']['prefix_length']\n        gatewayip = json.loads(resp.content)['spec']['resources']['ip_config']['default_gateway_ip']\n\n# If the Subnets call failed\nelse:\n        print(\"Subnets call failed\"), json.dumps(json.loads(resp.content), indent=4)\n#        exit(1)\n\n# Convert the subnet mask from CIDR to Dotted Octets\ndef cidr_to_netmask(cidr):\n        cidr = int(cidr)\n        mask = (0xffffffff >> (32 - cidr)) << (32 - cidr)\n        return (str( (0xff000000 & mask) >> 24)   + '.' +\n                str( (0x00ff0000 & mask) >> 16)   + '.' +\n                str( (0x0000ff00 & mask) >> 8)    + '.' +\n                str( (0x000000ff & mask)))\n\nsubnetmask = cidr_to_netmask(subnetcidr)\n\n\n'''\nThis section creates the Node object in the KPS portal\n'''\n        \nbody = {\"description\": \"@@{sddesc}@@\",\n  \"gateway\": gatewayip,\n  \"ipAddress\": \"@@{address}@@\",\n  \"name\": \"@@{sdname}@@-@@{calm_array_index}@@\",\n  \"serialNumber\": \"@@{edgeserial}@@\",\n  \"subnet\": subnetmask,\n  \"svcDomainId\": \"@@{calm_array_sd_id}@@\"\n}\n\nprint(body)\n\n# Create the URLs for this call\niotbaseURL = \"https:\/\/karbon.nutanix.com\/\"\niotapiurl = \"v1.0\/nodes\"\nioturl = iotbaseURL+iotapiurl\n\n# Set the Headers\niotHeaders = {\"Accept\" : \"application\/json\", \"Authorization\" : \"Bearer \" + \"@@{APIToken}@@\"}\nprint \"iotHeaders={0}\".format({\"Accept\" : \"application\/json\", \"Authorization\" : \"Bearer \" + \"@@{APIToken}@@\"})\n\n# Make the call\nresp = urlreq(ioturl, verb='POST', params=json.dumps(body), headers=iotHeaders, verify=False)\nprint (json.dumps(body))\nif resp.ok:\n        response = resp.json()\n        print(response)\n\nelse:\n        print(\"Adding Node to Service Domain\"), json.dumps(json.loads(resp.content), indent=4)\n        print(iotHeaders)\n\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"2da1980d_runbook","main_task_local_reference":{"kind":"app_task","name":"198d629d_dag"},"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Get Edge Serial"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"5f41b7cd_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"1830d466_runbook","main_task_local_reference":{"kind":"app_task","name":"5f41b7cd_dag"},"variable_list":[]}},"variable_list":[]}],"app_profile_list":[{"deployment_create_list":[{"type":"GREENFIELD","action_list":[],"name":"31fbb160_deployment","min_replicas":"1","default_replicas":"@@{node_count}@@","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"3","package_local_reference_list":[{"kind":"app_package","name":"Get Edge Serial"}],"substrate_local_reference":{"kind":"app_substrate","name":"SD_VM"},"variable_list":[],"description":""}],"description":"","action_list":[],"name":"Nutanix","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"Only neccessary for Multinode Service Domain","data_type":"BASE","type":"LOCAL","name":"storageContainerName","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"Only neccessary for Multinode Service Domain","data_type":"BASE","type":"LOCAL","name":"dataServicesIP","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"Only neccessary for Multinode Service Domain","data_type":"BASE","type":"SECRET","name":"prismElementPassword","value":"","label":"","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"Only neccessary for Multinode Service Domain","data_type":"BASE","type":"LOCAL","name":"prismElementUserName","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"Only neccessary for Multinode Service Domain","data_type":"BASE","type":"LOCAL","name":"prismElementClusterVIP","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":false,"description":"Only neccessary for Multinode Service Domain","data_type":"BASE","type":"LOCAL","name":"VirtualIP","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"APIToken","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"sdname","value":"***use only lower-case and hypens - e.g. default-edge***","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"sddesc","value":"Description for the Service Domain VM","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":false,"description":"Deploy Multinode Service Domain","data_type":"BASE","type":"LOCAL","name":"node_count","value":"1","label":"","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["1","3"]}}]}],"published_service_definition_list":[],"default_credential_local_reference":{"kind":"app_credential","name":"KPS Tenant"},"type":"USER"},"name":"KPS Service Domain Deployment"},"api_version":"3.0","metadata":{"last_update_time":"1599851303448522","kind":"blueprint","spec_version":25,"creation_time":"1599821565625518","name":"KPS Service Domain Deployment"}}